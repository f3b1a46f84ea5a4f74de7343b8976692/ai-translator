import logging
import tempfile
import os
import asyncio
import time
from telegram import Update, Voice, InputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
from telegram.constants import ChatAction

from src.services.transcription import TranscriptionService
from src.services.translation import TranslationService
from src.services.speech import SpeechService
from src.services.assistant import MistralAssistantService
from src.services.llama_assistant import Llama31AssistantService
from src.config import Config
from faster_whisper import WhisperModel

logger = logging.getLogger(__name__)

# –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
LANGUAGE_CALLBACK_PREFIX = "lang_"
TRANSLATE_CALLBACK_PREFIX = "trans_"
# Add the new prefix
ASSISTANT_CALLBACK_PREFIX = "asst_"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AWAITING_TRANSLATION_LANGUAGE = 1

class BotHandlers:
    def __init__(self):
        self.transcription_service = TranscriptionService()
        self.translation_service = TranslationService()
        self.speech_service = SpeechService()
        self.assistant_service = MistralAssistantService()
        self.tour_assistant_service = Llama31AssistantService()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
        # {user_id: {"text": "...", "source_lang": "..."}}
        self.pending_translations = {}

    def _get_language_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
        
        Returns:
            InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        """
        keyboard = []
        row = []
        main_languages = ['en', 'ru', 'es', 'fr', 'de']
        
        for i, lang_code in enumerate(main_languages):
            if i > 0 and i % 3 == 0:  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 3 –∫–Ω–æ–ø–∫–∏
                keyboard.append(row)
                row = []
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Ä–æ–¥–Ω–æ–º —è–∑—ã–∫–µ
            native_name = Config.get_native_language_name(lang_code)
            
            button = InlineKeyboardButton(
                text=native_name,
                callback_data=f"{LANGUAGE_CALLBACK_PREFIX}{lang_code}"
            )
            row.append(button)
            
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
            keyboard.append(row)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏" –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        keyboard.append([
            InlineKeyboardButton(
                text="üåê –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ / Other languages",
                callback_data=f"{LANGUAGE_CALLBACK_PREFIX}more"
            )
        ])
            
        return InlineKeyboardMarkup(keyboard)
        
    def _get_all_languages_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤.
        
        Returns:
            InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ –≤—Å–µ–º–∏ —è–∑—ã–∫–∞–º–∏
        """
        keyboard = []
        row = []
        
        for i, lang_code in enumerate(Config.SUPPORTED_LANGUAGES.keys()):
            if i > 0 and i % 2 == 0:  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏
                keyboard.append(row)
                row = []
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Ä–æ–¥–Ω–æ–º —è–∑—ã–∫–µ
            native_name = Config.get_native_language_name(lang_code)
            
            button = InlineKeyboardButton(
                text=native_name,
                callback_data=f"{LANGUAGE_CALLBACK_PREFIX}{lang_code}"
            )
            row.append(button)
            
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
            keyboard.append(row)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        keyboard.append([
            InlineKeyboardButton(
                text="‚Üê –ù–∞–∑–∞–¥ / Back",
                callback_data=f"{LANGUAGE_CALLBACK_PREFIX}back"
            )
        ])
            
        return InlineKeyboardMarkup(keyboard)

    def _get_translation_language_keyboard(self, exclude_lang=None):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.
        
        Args:
            exclude_lang: –Ø–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ 
                          (–æ–±—ã—á–Ω–æ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è)
                          
        Returns:
            InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        """
        keyboard = []
        row = []
        
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —è–∑—ã–∫–∏, –∏—Å–∫–ª—é—á–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫
        languages = [lang for lang in Config.SUPPORTED_LANGUAGES.keys() 
                    if lang != exclude_lang]
        
        for i, lang_code in enumerate(languages):
            if i > 0 and i % 2 == 0:  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏
                keyboard.append(row)
                row = []
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Ä–æ–¥–Ω–æ–º —è–∑—ã–∫–µ
            native_name = Config.get_native_language_name(lang_code)
            
            button = InlineKeyboardButton(
                text=native_name,
                callback_data=f"{TRANSLATE_CALLBACK_PREFIX}{lang_code}"
            )
            row.append(button)
            
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
            keyboard.append(row)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ø—Ä–æ—Å–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", –µ—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.assistant_service.is_available():
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
            user_id = self.pending_translations.get("user_id", 0)
            user_language = Config.get_user_language(user_id)
            
            button_text = "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞" if user_language == 'ru' else "ü§ñ Ask assistant"
            source_lang = self.pending_translations.get("original_lang" if "original_lang" in self.pending_translations else "source_lang", "en")
            
            keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"{ASSISTANT_CALLBACK_PREFIX}{source_lang}"
                )
            ])
            
        return InlineKeyboardMarkup(keyboard)
        
    def _get_formatted_languages(self, lang_code):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.
        
        Args:
            lang_code: –ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
        """
        if lang_code == 'ru':
            return ", ".join([f"{name} ({Config.get_native_language_name(code)})" 
                            for code, name in Config.SUPPORTED_LANGUAGES.items()])
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ä–æ–¥–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            english_names = {
                'ar': 'Arabic', 'ja': 'Japanese', 'en': 'English', 'es': 'Spanish',
                'fr': 'French', 'de': 'German', 'it': 'Italian', 'pt': 'Portuguese',
                'zh': 'Chinese', 'ko': 'Korean', 'ru': 'Russian'
            }
            return ", ".join([f"{english_names.get(code, name)} ({Config.get_native_language_name(code)})" 
                            for code, name in Config.SUPPORTED_LANGUAGES.items()])

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_language = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —è–∑—ã–∫–æ–≤–æ–π –∫–æ–¥ –∏–∑ Telegram
        if user.language_code:
            # –ï—Å–ª–∏ —ç—Ç–æ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if len(user.language_code) == 2 and Config.is_language_supported(user.language_code):
                user_language = user.language_code
            # –ò–Ω–∞—á–µ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, en-US -> en)
            elif len(user.language_code) > 2 and Config.is_language_supported(user.language_code[:2]):
                user_language = user.language_code[:2]
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Config.set_user_language(user_id, user_language)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
        languages = self._get_formatted_languages(user_language)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        welcome_template = Config.WELCOME_MESSAGES.get(user_language, Config.WELCOME_MESSAGES['en'])
        welcome_message = welcome_template.format(languages=languages)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        if user_language == 'ru':
            commands_info = "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/lang - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
            if self.assistant_service.is_available():
                commands_info += "\n/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"
        else:
            commands_info = "\n\nAvailable commands:\n/start - Start working with the bot\n/lang - Change language"
            if self.assistant_service.is_available():
                commands_info += "\n/ask - Ask a question to the AI assistant"
                
        welcome_message += commands_info
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=welcome_message,
            reply_markup=self._get_language_keyboard()
        )
        
    async def lang_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lang –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
        """
        user_id = update.effective_user.id
        user_language = Config.get_user_language(user_id)
        
        # –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_language == 'ru':
            message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫:"
        else:
            message = "Choose your preferred language:"
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message,
            reply_markup=self._get_language_keyboard()
        )

    async def language_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
        """
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ callback_data
        callback_data = query.data
        lang_code = callback_data[len(LANGUAGE_CALLBACK_PREFIX):]
        
        if lang_code == 'more':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ —è–∑—ã–∫–∞–º–∏
            await query.edit_message_reply_markup(
                reply_markup=self._get_all_languages_keyboard()
            )
            await query.answer()
            return
            
        if lang_code == 'back':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            await query.edit_message_reply_markup(
                reply_markup=self._get_language_keyboard()
            )
            await query.answer()
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Config.set_user_language(user_id, lang_code)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —è–∑—ã–∫–∞
        language_name = Config.get_language_name(lang_code)
        native_name = Config.get_native_language_name(lang_code)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        user_language = Config.get_user_language(user_id)
        
        if user_language == 'ru':
            message = f"–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {language_name} ({native_name})."
        else:
            english_names = {
                'ar': 'Arabic', 'ja': 'Japanese', 'en': 'English', 'es': 'Spanish',
                'fr': 'French', 'de': 'German', 'it': 'Italian', 'pt': 'Portuguese',
                'zh': 'Chinese', 'ko': 'Korean', 'ru': 'Russian'
            }
            language_name_en = english_names.get(lang_code, language_name)
            message = f"Language successfully changed to {language_name_en} ({native_name})."
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.answer(message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        languages = self._get_formatted_languages(lang_code)
        welcome_template = Config.WELCOME_MESSAGES.get(lang_code, Config.WELCOME_MESSAGES['en'])
        welcome_message = welcome_template.format(languages=languages)
        
        await query.edit_message_text(
            text=welcome_message,
            reply_markup=self._get_language_keyboard()
        )
        
    async def ask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
        """
        user_id = update.effective_user.id
        user_language = Config.get_user_language(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if not self.assistant_service.is_available():
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_language == 'ru':
                message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞."
            else:
                message = "Sorry, the AI assistant service is currently unavailable. Please check the API key settings."
                
            await update.message.reply_text(message)
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if not context.args or not ''.join(context.args).strip():
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_language == 'ru':
                message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask. –ù–∞–ø—Ä–∏–º–µ—Ä: /ask –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫?"
            else:
                message = "Please provide your question after the /ask command. For example: /ask How does the translator work?"
                
            await update.message.reply_text(message)
            return
            
        # –°–æ–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
        question = ' '.join(context.args)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—á–∞—Ç–∏
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        response = self.assistant_service.generate_creative_response(
            prompt=question,
            language=user_language,
            creative_level=0.7
        )
        
        if not response:
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            if user_language == 'ru':
                message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                message = "Sorry, could not get a response from the assistant. Please try again later."
                
            await update.message.reply_text(message)
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response)

    async def tour_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tour –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–∞—Ö –ø–æ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–º—É –∫—Ä–∞—é.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
        """
        user_id = update.effective_user.id
        user_language = Config.get_user_language(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—É—Ä–æ–≤
        if not self.tour_assistant_service.is_available():
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_language == 'ru':
                message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞ Llama."
            else:
                message = "Sorry, the tour assistant service is currently unavailable. Please check the Llama API key settings."
                
            await update.message.reply_text(message)
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if not context.args or not ''.join(context.args).strip():
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            if user_language == 'ru':
                message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ —Ç—É—Ä–∞—Ö –ø–æ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–º—É –∫—Ä–∞—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /tour.\n\n" \
                          "–ù–∞–ø—Ä–∏–º–µ—Ä:\n" \
                          "/tour –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –°–æ—á–∏?\n" \
                          "/tour –ö—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å —Å –¥–µ—Ç—å–º–∏ –≤ –ì–µ–ª–µ–Ω–¥–∂–∏–∫–µ?\n" \
                          "/tour –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π\n" \
                          "/tour –í–∏–Ω–Ω—ã–µ —Ç—É—Ä—ã –≤ –ê–±—Ä–∞—É-–î—é—Ä—Å–æ"
            else:
                message = "Please provide your question about tours in the Krasnodar region after the /tour command.\n\n" \
                          "For example:\n" \
                          "/tour What to see in Sochi?\n" \
                          "/tour Where to go with children in Gelendzhik?\n" \
                          "/tour Best time to visit Krasnodar region\n" \
                          "/tour Wine tours in Abrau-Durso"
                
            await update.message.reply_text(message)
            return
            
        # –°–æ–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        query = ' '.join(context.args)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—á–∞—Ç–∏
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ç—É—Ä–∞–º –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        response = self.tour_assistant_service.get_tour_recommendation(
            query=query,
            language=user_language,
            temperature=0.7
        )
        
        if not response:
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            if user_language == 'ru':
                message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
            else:
                message = "Sorry, could not get information about tours. Please try again later or modify your query."
                
            await update.message.reply_text(message)
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response)

    async def process_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        text = update.message.text

        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        
        source_lang = self.translation_service.detect_language(text)
        user_preferred_language = Config.get_user_language(user_id)
        
        if not source_lang:
            # –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–º —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_preferred_language == 'ru':
                reply_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            else:
                reply_text = "Could not detect the language of the text. Please try again."
                
            await update.message.reply_text(reply_text)
            return ConversationHandler.END
            
        if not Config.is_language_supported(source_lang):
            # –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–º —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_preferred_language == 'ru':
                reply_text = f"–Ø–∑—ã–∫ {Config.get_language_name(source_lang)} ({source_lang}) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤."
            else:
                reply_text = f"Language {source_lang} is not supported. Please use one of the supported languages."
            
            await update.message.reply_text(reply_text)
            return ConversationHandler.END
            
        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —É–∂–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–µ –¥–µ–ª–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        if source_lang == 'en':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
            self.pending_translations[user_id] = {
                "text": text,
                "source_lang": source_lang
            }
        else:
            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
            english_translation = self.translation_service.translate(text, source_lang=source_lang, target_lang='en')
            
            if not english_translation:
                # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –Ω–µ —É–¥–∞–ª—Å—è
                if user_preferred_language == 'ru':
                    reply_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫."
                else:
                    reply_text = "Failed to translate the text to English."
                    
                await update.message.reply_text(reply_text)
                return ConversationHandler.END
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
            self.pending_translations[user_id] = {
                "text": english_translation,
                "source_lang": 'en',
                "original_text": text,
                "original_lang": source_lang
            }
            
            # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
            translation_header_en = Config.TRANSLATION_HEADERS.get('en', Config.TRANSLATION_HEADERS['en'])
            await update.message.reply_text(f"{translation_header_en}\n{english_translation}")
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_preferred_language == 'ru':
            source_lang_name = Config.get_language_name(source_lang)
        else:
            english_names = {
                'ar': 'Arabic', 'ja': 'Japanese', 'en': 'English', 'es': 'Spanish',
                'fr': 'French', 'de': 'German', 'it': 'Italian', 'pt': 'Portuguese',
                'zh': 'Chinese', 'ko': 'Korean', 'ru': 'Russian'
            }
            source_lang_name = english_names.get(source_lang, source_lang)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–∑—ã–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–Ω–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, —Ç.–∫. –º—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥)
        confirm_message = Config.TRANSLATION_CONFIRM_MESSAGES.get(
            user_preferred_language, 
            Config.TRANSLATION_CONFIRM_MESSAGES['en']
        ).format(source_lang=source_lang_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        await context.bot.send_message(
            chat_id=chat_id,
            text=confirm_message,
            reply_markup=self._get_translation_language_keyboard(exclude_lang=source_lang)
        )
        
        return AWAITING_TRANSLATION_LANGUAGE

    async def translation_language_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
        """
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
        callback_data = query.data
        target_lang = callback_data[len(TRANSLATE_CALLBACK_PREFIX):]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        if user_id not in self.pending_translations:
            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –∫–∞–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
            user_preferred_language = Config.get_user_language(user_id)
            if user_preferred_language == 'ru':
                await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞.")
            else:
                await query.edit_message_text("Translation data expired. Please send your text again.")
                
            return ConversationHandler.END
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        translation_data = self.pending_translations[user_id]
        text = translation_data["text"]
        source_lang = translation_data["source_lang"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π
        if target_lang == source_lang:
            user_preferred_language = Config.get_user_language(user_id)
            if user_preferred_language == 'ru':
                await query.edit_message_text("–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —è–∑—ã–∫.")
            else:
                await query.edit_message_text("Selected language is the same as the source. Please choose a different language.")
                
            return ConversationHandler.END
            
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
        user_preferred_language = Config.get_user_language(user_id)
        translating_message = Config.TRANSLATING_MESSAGES.get(
            user_preferred_language, 
            Config.TRANSLATING_MESSAGES['en']
        ).format(target_lang=Config.get_language_name(target_lang))
        
        await query.edit_message_text(translating_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        # –ú—ã —É–∂–µ –∏–º–µ–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (source_lang='en'), –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
        translated_text = self.translation_service.translate(text, source_lang='en', target_lang=target_lang)
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é Mistral, –µ—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
        if not translated_text and self.assistant_service.is_available():
            translated_text = self.assistant_service.translate_with_context(text, 'en', target_lang)
            
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del self.pending_translations[user_id]
        
        if not translated_text:
            # –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–º —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_preferred_language == 'ru':
                reply_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç."
            else:
                reply_text = "Failed to translate the text."
                
            await context.bot.send_message(chat_id=chat_id, text=reply_text)
            return ConversationHandler.END

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —è–∑—ã–∫–µ, –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        translation_header = Config.TRANSLATION_HEADERS.get(target_lang, Config.TRANSLATION_HEADERS['en'])
        reply_text = f"{translation_header}\n{translated_text}"
            
        await context.bot.send_message(chat_id=chat_id, text=reply_text)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_DOCUMENT)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ SpeechService
        temp_file = None
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
            import tempfile
            temp_file = tempfile.NamedTemporaryFile(suffix=".mp3", delete=False)
            temp_file.close()
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
            success = self.speech_service.synthesize(
                text=translated_text, 
                output_path=temp_file.name, 
                language=target_lang
            )
            
            if success:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
                audio_duration = self.speech_service.detect_audio_length(temp_file.name)
                duration_str = f" ({int(audio_duration)} —Å–µ–∫)" if audio_duration else ""
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∞—É–¥–∏–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
                audio_caption = Config.AUDIO_CAPTIONS.get(target_lang, Config.AUDIO_CAPTIONS['en'])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                with open(temp_file.name, 'rb') as audio_file:
                    await context.bot.send_audio(
                        chat_id=chat_id,
                        audio=audio_file,
                        caption=f"{audio_caption}{duration_str}",
                        title=f"Translation {source_lang} ‚Üí {target_lang}"
                    )
            else:
                # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
                if user_preferred_language == 'ru':
                    error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                else:
                    error_message = "Failed to generate audio. Please try again later."
                    
                await context.bot.send_message(chat_id=chat_id, text=error_message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}", exc_info=True)
            
            # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
            if user_preferred_language == 'ru':
                error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ."
            else:
                error_message = "An error occurred while processing audio."
                
            await context.bot.send_message(chat_id=chat_id, text=error_message)
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_file:
                try:
                    import os
                    os.unlink(temp_file.name)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
        return ConversationHandler.END

    async def process_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        voice = update.message.voice
        
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        user_preferred_language = Config.get_user_language(user_id)
        if user_preferred_language == 'ru':
            processing_message = "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        else:
            processing_message = "Processing voice message..."
            
        processing_msg = await context.bot.send_message(
            chat_id=chat_id,
            text=processing_message
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await context.bot.get_file(voice.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        import tempfile
        voice_temp = tempfile.NamedTemporaryFile(suffix=".ogg", delete=False)
        voice_temp.close()
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_DOCUMENT)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await voice_file.download_to_drive(voice_temp.name)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            transcription_result = self.transcription_service.transcribe(voice_temp.name)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            transcribed_text = None
            whisper_detected_language = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å –æ—Ç –º–µ—Ç–æ–¥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            if isinstance(transcription_result, tuple) and len(transcription_result) == 2:
                # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –∫–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç, —è–∑—ã–∫)
                transcribed_text, whisper_detected_language = transcription_result
            elif transcription_result:
                # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                transcribed_text = transcription_result
            
            if not transcribed_text:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å
                if user_preferred_language == 'ru':
                    error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ–≤–æ—Ä–∏—Ç–µ —á—ë—Ç—á–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                else:
                    error_message = "Failed to recognize speech. Please speak more clearly or use a text message."
                    
                await processing_msg.edit_text(error_message)
                return
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            transcription_msg = f"üé§ {transcribed_text}"
            await processing_msg.edit_text(transcription_msg)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if whisper_detected_language:
                logger.info(f"Whisper –æ–ø—Ä–µ–¥–µ–ª–∏–ª —è–∑—ã–∫: {whisper_detected_language}")
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π Whisper —è–∑—ã–∫ –∫–∞–∫ –ø–æ–¥—Å–∫–∞–∑–∫—É
            source_lang = self.translation_service.detect_language(
                transcribed_text, 
                hint_language=whisper_detected_language
            )
            
            if not source_lang:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫
                if user_preferred_language == 'ru':
                    error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Ä–µ—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ–≤–æ—Ä–∏—Ç–µ —á—ë—Ç—á–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                else:
                    error_message = "Failed to detect speech language. Please speak more clearly or use a text message."
                    
                await context.bot.send_message(chat_id=chat_id, text=error_message)
                return ConversationHandler.END
                
            # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —É–∂–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–µ –¥–µ–ª–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
            if source_lang == 'en':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                self.pending_translations[user_id] = {
                    "text": transcribed_text,
                    "source_lang": source_lang,
                    "user_id": user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
                }
            else:
                # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
                english_translation = self.translation_service.translate(transcribed_text, source_lang=source_lang, target_lang='en')
                
                if not english_translation:
                    # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –Ω–µ —É–¥–∞–ª—Å—è
                    if user_preferred_language == 'ru':
                        reply_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—á—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫."
                    else:
                        reply_text = "Failed to translate speech to English."
                        
                    await context.bot.send_message(chat_id=chat_id, text=reply_text)
                    return ConversationHandler.END
                    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
                self.pending_translations[user_id] = {
                    "text": english_translation,
                    "source_lang": 'en',
                    "original_text": transcribed_text,
                    "original_lang": source_lang,
                    "user_id": user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
                }
                
                # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
                translation_header_en = Config.TRANSLATION_HEADERS.get('en', Config.TRANSLATION_HEADERS['en'])
                await context.bot.send_message(chat_id=chat_id, text=f"{translation_header_en}\n{english_translation}")
                
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_preferred_language == 'ru':
                source_lang_name = Config.get_language_name(source_lang)
            else:
                english_names = {
                    'ar': 'Arabic', 'ja': 'Japanese', 'en': 'English', 'es': 'Spanish',
                    'fr': 'French', 'de': 'German', 'it': 'Italian', 'pt': 'Portuguese',
                    'zh': 'Chinese', 'ko': 'Korean', 'ru': 'Russian'
                }
                source_lang_name = english_names.get(source_lang, source_lang)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–∑—ã–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            confirm_message = Config.TRANSLATION_CONFIRM_MESSAGES.get(
                user_preferred_language, 
                Config.TRANSLATION_CONFIRM_MESSAGES['en']
            ).format(source_lang=source_lang_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            await context.bot.send_message(
                chat_id=chat_id,
                text=confirm_message,
                reply_markup=self._get_translation_language_keyboard(exclude_lang=source_lang)
            )
            
            return AWAITING_TRANSLATION_LANGUAGE
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            
            # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
            if user_preferred_language == 'ru':
                error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
            else:
                error_message = "An error occurred while processing voice message."
                
            await processing_msg.edit_text(error_message)
            return ConversationHandler.END
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                import os
                os.unlink(voice_temp.name)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

    async def assistant_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
        """
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ callback_data
        callback_data = query.data
        request_lang = callback_data[len(ASSISTANT_CALLBACK_PREFIX):]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if user_id not in self.pending_translations:
            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
            user_preferred_language = Config.get_user_language(user_id)
            if user_preferred_language == 'ru':
                await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.")
            else:
                await query.edit_message_text("Voice data expired. Please send your voice message again.")
                
            return ConversationHandler.END
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        translation_data = self.pending_translations[user_id]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏ —è–∑—ã–∫
        if "original_text" in translation_data and "original_lang" in translation_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —è–∑—ã–∫, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            text = translation_data["original_text"]
            lang = translation_data["original_lang"]
        else:
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏ —è–∑—ã–∫ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            text = translation_data["text"]
            lang = translation_data["source_lang"]
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        user_preferred_language = Config.get_user_language(user_id)
        if user_preferred_language == 'ru':
            processing_message = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å..."
        else:
            processing_message = "Assistant is processing your request..."
            
        await query.edit_message_text(processing_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ —è–∑—ã–∫–µ –∑–∞–ø—Ä–æ—Å–∞
        response = self.assistant_service.generate_creative_response(
            prompt=text,
            language=lang,
            creative_level=0.7
        )
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del self.pending_translations[user_id]
        
        if not response:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            if user_preferred_language == 'ru':
                error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                error_message = "Failed to get a response from the assistant. Please try again later."
                
            await context.bot.send_message(chat_id=chat_id, text=error_message)
            return ConversationHandler.END
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await context.bot.send_message(chat_id=chat_id, text=response)
        
        return ConversationHandler.END

    def get_handlers(self):
        text_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_text)],
            states={
                AWAITING_TRANSLATION_LANGUAGE: [
                    CallbackQueryHandler(
                        self.translation_language_callback, 
                        pattern=f"^{TRANSLATE_CALLBACK_PREFIX}"
                    ),
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                    CallbackQueryHandler(
                        self.assistant_callback,
                        pattern=f"^{ASSISTANT_CALLBACK_PREFIX}"
                    )
                ]
            },
            fallbacks=[],
            name="text_translation_conversation",
            persistent=False
        )
        
        voice_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.VOICE, self.process_voice)],
            states={
                AWAITING_TRANSLATION_LANGUAGE: [
                    CallbackQueryHandler(
                        self.translation_language_callback, 
                        pattern=f"^{TRANSLATE_CALLBACK_PREFIX}"
                    ),
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                    CallbackQueryHandler(
                        self.assistant_callback,
                        pattern=f"^{ASSISTANT_CALLBACK_PREFIX}"
                    )
                ]
            },
            fallbacks=[],
            name="voice_translation_conversation",
            persistent=False
        )
        
        return [
            CommandHandler('start', self.start),
            CommandHandler('lang', self.lang_command),
            CommandHandler('ask', self.ask_command),
            CommandHandler('tour', self.tour_command),
            CallbackQueryHandler(self.language_callback, pattern=f"^{LANGUAGE_CALLBACK_PREFIX}"),
            text_handler,
            voice_handler
        ] 